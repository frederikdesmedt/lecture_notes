Passwords are often seen as a weak form of authentication.
This weakness is not inherent to a password, but follows from how users handle passwords.
One of these weak behavior patterns is reusing passwords across many applications.
Unfortunately, history has shown us that this is a real threat.
In 2016, Spotify reset the passwords for all their accounts.
Spotify argued that the passwords could have been compromised in a leak on another service.
It was no coincidence that a few days before, the data from a breach at Dropbox surfaced online.
It contained data on 60 million accounts.
And the problem is not limited to Dropbox alone.
Remember the "have I been pwned?" website from before?
In September 2017, it listed over 4 billion of compromised accounts.
Unfortunately, the truth is that every application can suffer from a data breach.
Therefore, it is best to adhere to a defense-in-depth strategy to minimize the impact of a data breach.
One important aspect of that defense strategy is the storage of passwords.
An application should ensure that passwords cannot be retrieved from the data.
But how do you store passwords in a secure way?
Before we look at the current best practice, let's take a look at a few examples of how not to store passwords.
Many applications store passwords in plain text in the database.
Here, you see an example of what the database might look like.
You can imagine that this approach becomes problematic in light of a data breach.
An attacker has full access to the user's account details, including the password.
Unfortunately, storing passwords in plain text is more common than you might think.
Here are two examples from dating sites that followed this practice.
In 2013, 42 million accounts from Cupid Media surfaced online.
The service stored passwords in plain text.
In 2016, the same happened with 27 million accounts from Mate1.com.
An alternative to storing plain text passwords is storing hashed passwords.
Here, you see an example of a password and its MD5 hash.
A hash function ensures there is no way to go back from the hash to the original password.
So how does this work for authentication?
The application stores the hashes in the database.
During authentication, the user provides the plain text password to the application.
The application can now recalculate the hash and compare it to the stored hash in the database.
These hashes will only match if the user provided the correct password.
When the attacker steals the data, he will not be able to derive the passwords from the hashes.
As good as this sounds, there are a few issues with hashed passwords.
A first issue rises if two users pick the same password.
As you can see here, the hash of the password will be the same as well.
While it does not reveal the password, it already tells the attacker a bit of information.
This information brings us to the second issue.
An attacker can precompute the hashes for a lot of passwords.
Such a list contains passwords and their corresponding hashes.
With such a list, retrieving passwords from the stolen data becomes trivial.
Finding precompiled lists of passwords and hashes is easy.
You even find lists of hashes for all possible combinations of different lengths.
These lists are known as rainbow tables.
They are huge, but very effective in breaking hashes in a data dump.
Again, this happens in practice.
In 2016, attackers stole 400 million accounts from AdultFriendFinder.
They stored passwords with the SHA1 hashing algorithm, which were easy to break.
A common approach to prevent these types of attacks against hashed passwords is using a salt.
A salt is a long, random string per user, that is appended to the password before it is hashed.
As you can see here, the application stores the salt in the database, alongside the hash of the password.
During authentication, the application recomputes the hash with the plaintext password and the salt.
If the hash matches the stored hash, the user has provided the original password.
Salting may look silly, but it offers a huge advantage.
Salting the passwords makes precomputation attacks infeasible.
The salt turns the password into a long string.
Rainbow tables are useless because they do not take the salt into account.
And if every user has a different salt, there is no feasible way to recreate such a table for a particular salt.
While salting and hashing seem secure, it is weaker than you might expect.
The problem with this approach is the use of hashing algorithms.
We talked about these hashing algorithms before, when we discussed the integrity property in HTTPS.
Because they are used in such a context, hashing algorithms are designed to be fast.
Unfortunately, that is also their biggest weakness when used for storing passwords.
Here is one example of how an attacker could break salted and hashed passwords.
Using a list of the 500 most common passwords,
he can use a brute force attack to try out each of these passwords with each of the salts.
Brute forcing salted passwords sounds silly and infeasible, but is that true?
Modern password cracking software is quite efficient, due to the use of graphical processors, or GPUs.
Here, you see a password cracking machine with eight NVIDIA GTX cards.
Guess how many MD5 hashes per second such a machine can calculate?
The number is 200 000 million hashes per second.
This number illustrates that brute forcing of salted MD5 hashes is feasible.
SHA1 is a bit slower, but still quite efficient.
Brute forcing happens at 68 000 million hashes per second.
The same holds for the other hashing algorithms.
They are designed to be fast, so they will always be subject to brute force attacks.
Let's conclude this part on a cliffhanger.
None of these strategies for storing credentials is considered secure.
In the next part, we will cover the current best practice for storing credentials.