In the last few years, more and more voices are proclaiming passwords as insecure, inefficient or even outright evil.
Instead, they advocate the use of alternative authentication mechanisms,
such as hardware tokens or mobile applications.
From a security point of view, these alternative mechanisms are superior in every way.
But adoption is slow.
For one because several decades of using passwords makes these mechanisms seem complicated and disruptive.
The truth is that almost every application today still uses passwords.
This is not going to change anytime soon.
That is why we will investigate common problems with passwords, and show you how to make passwords more secure.
One of the weakest security properties of a password is that it is usable by anybody that knows it.
This leads to various kinds of attacks.
The simplest attack is to guess the password, using a variety of techniques.
Here are a couple examples that are quite effective:
Using personal information, such as the name of your children or pet
Using dictionary attacks, trying actual words or word combinations
Using lists of commonly used passwords
A more advanced type of attack is phishing.
A phishing attack tricks the user into visiting a malicious website.
This website looks exactly like an innocent one.
When the user authenticates to the malicious site, the attacker steals the user’s credentials.
Another way to obtain valid credentials is by hacking the application and stealing the database.
Many applications store passwords in an insecure way.
Because of this, attackers can recover the actual passwords from the database.
These attacks are amplified by the fact that many people reuse passwords across accounts.
Everyone has dozens of accounts with a password,
and remembering a unique password for each account is next to impossible.
As a result, obtaining a single password gives the attacker access to many accounts of the same user.
The increase in data breaches has resulted in massive online dumps of credentials.
The problem is so bad that there is even a website keeping track of all the accounts in the data dumps.
The site is “Have I Been Pwnd”, and it allows you to see if your email address occurs anywhere in the set of data dumps.
Here is how it works.
An attacker compromises an application and dumps the entire database online.
The database dump contains a list of usernames, along with their passwords.
Regardless of whether the passwords are stored securely, they should be considered compromised.
When the dataset has been loaded in the “Have I Been Pwned” website,
users can see if they are affected by the data breach.
Even better, users that subscribed to the notification service get a warning when their data appears in a new data set.
As a domain administrator, you can sign up to receive warnings when any email address of your domain appears in a breach.
Here is an example of how to query the database for an email address.
As you can see here, my address occurred in the Adobe data breach.
When the site returns a match for your email address, you should consider those credentials as compromised.
Now is a good time to pause the video and go search for your email address.
As you can see, the security properties of passwords are less than stellar.
But by addressing these problems, passwords become a lot more secure.
Let’s see what this means for you as a user and for your application.
The best way to improve the security of passwords is by using a password manager.
A password manager is an application that securely stores credentials for various accounts.
The biggest benefit is that the user no longer needs to remember them.
As a result, password managers enable the use of a unique and complex password for every account.
And using unique passwords eliminates a couple of security problems as well.
First, guessing attacks become irrelevant, since passwords can now be long and random.
Second, there is no longer a need reuse passwords across accounts.
So even if the attacker obtains a password, it will only be valid for a single account.
Third, password managers increase the resilience against phishing attacks.
Many password managers offer autocomplete features in the browser.
When the password manager finds an account connected to the URL of the site,
it offers to login with the click of a button.
But in a phishing attack, the URL points to a malicious site.
So the password manager will not find any associated accounts.
Personally, I champion the use of a password manager.
But I also understand that many users find it too complicated, or just do not trust the software.
If you are one of these users, there are other steps you can take to reduce your exposure.
One example is to divide accounts into trust levels, and use a different password for each of these levels.
This separates sensitive sites, such as a banking website, from unimportant sites, such as a forum.
If the attacker obtains one of your passwords, all sites within that level can be compromised.
But at least, the attack cannot escalate to sites in a different trust level.
While not perfect, this system offers stronger guarantees than reusing the same password everywhere.
To conclude, it is safe to say that passwords are not going away any time soon.
Even though many consider passwords to be insecure, most users understand how they work.
As we have seen, taking a few extra measures already increases the security properties of passwords.
In the next part, we will see how your application can handle passwords in a secure way.