
Lab session - Making BeerSafe work over HTTPS
 
Setting up the lab session
Before you get started, load the right branch from the repository. Add and commit your current changes to the branch (git add -A and git commit -a -m "switching branches"). Next, checkout the start_chapter2_https branch from the Git repository (git checkout start_chapter2_https). Also check for the latest updates (git pull) command.
Dealing with mixed content
Remember the result when you loaded the BeerSafe application over HTTPS? The application was served securely, but it looked horrible. Let's investigate the problem in a bit more detail.
Load the homepage of the BeerSafe application in Chrome, and take a look at the developer console. You should see something like the screenshot shown below.

These errors and warnings indicate that the browser intervened when it encountered mixed content in the page. Active mixed content, such as scripts and style sheets have been blocked. Passive mixed content, such as images, has been loaded, but the browser still complains.
Using CSP to detect mixed content
As we have seen in the course, Content Security Policy is very useful to detect mixed content. The training application is already setup to deploy a CSP policy. All you need to do is configure the CSP handler with a particular policy. Let's set it up and see how it works.
In your development environment, you can find the following folder: src/main/webapp/_securitypolicies/. Inside this folder, there is a configuration file that controls the CSP filter, named CSP.txt. Change the filter so that it matches the configuration shown below.
# Enable filter (valid values: true, false)
enabled: true

# Set policy as report-only (valid values: true, false)
report-only: true

# List of directives (all directives will be joined as-is into a single policy, so don't forget your semicolons)
directive: default-src https: 'unsafe-inline' 'unsafe-eval';
Let's break the CSP configuration down step by step.
The first part of the file enables the CSP filter.
The second part specifies if the filter should deploy a report-only policy or a blocking policy. Under the hood, this setting controls the name of the header.
The third part specifies the CSP policy. For easy editing, you can spread your policy over several lines. The filter will concatenate each line into a single line and attach it to the header
Once you have modified the configuration file, the application will automatically pick up the changes. Go back to the browser, and now load the BeerSafe application over HTTP. If all goes well, the CSP filter should have added the CSP response header, and the browser will pick up the policy. You can verify this in the browser's developer console. As you can see in the image below, the browser now also generates a bunch of CSP warnings, but everything keeps working as expected.

Note that our CSP policy is a report-only policy, but that we have not specified a reporting endpoint. We will not provide detailed instructions on setting up a reporting endpoint. However, you can always use the freely available report-uri.io service to collect your reports.
Fixing the mixed content problem
Fixing the mixed content problem in the BeerSafe application is quite straightforward. The error messages generated by the CSP policy contain all the info needed to locate the source of the problem. When the problem is located, all you need to do is to change the HTTP URLs to HTTPS URLs. The code snippet below gives you an example of what needs to be done.
<!--<script src="http://cdn.beersafe.eu/js/jquery-3.2.1.min.js"></script>-->
<script src="https://cdn.beersafe.eu/js/jquery-3.2.1.min.js"></script>
<!--<script src="http://cdn.beersafe.eu/js/popper.min.js"></script>-->
<script src="https://cdn.beersafe.eu/js/popper.min.js"></script>
Change all HTTP URLs to HTTPS, and see if the errors go away. You can find most of the files in the following folder: src/main/webapp/WEB_INF/jsp/includes/. Also go through the files in src/main/webapp/WEB_INF/jsp/ to check for HTTP URLs.
As you can see, a few errors still remain.

These errors are related to relative URLs, and cannot easily be fixed. However, once we will upgrade our application to HTTPS, these problems go away. Take a look at the effect our changes had on the HTTPS version of the application.
Redirecting from HTTP to HTTPS
Now that the mixed content problems have been fixed, our BeerSafe application is fully operational over HTTPS. But if you take a close look, you will notice that the user does not automatically end up on the HTTPS version of the application.
Close previous tabs in Chrome, and open a new tab. Open the network tab of the developer console before loading the BeerSafe application. Also make sure that the checkbox preserve log is checked, as shown below.

If you now type beersafe.eu into the address bar of the browser, you will see that the application is loaded. The network tab of the console shows the requests that have been made to load the application. If you take a look at the request to beersafe.eu, all the way at the top, you see that it went to http://beersafe.eu.

As you can see, The server then redirected us to http://beersafe.eu/Home, still over HTTP. Let's change that, so that all users will be able to use the more secure HTTPS version.
As you can see from the traffic here, simply turning off HTTP would break certain scenarios. Therefore, we will redirect the user from HTTP to HTTPS. You can enable such a redirect by modifying the https.txt configuration file in the src/main/webapp/_securitypolicies/ folder. All you need to so is set the redirect-enabled property to true, as shown below.
# Enable redirect from HTTP to HTTPS (valid values: true, false)
redirect-enabled: true
Once you have modified and saved the file, you can see the redirect in action. Clear the network console, and navigate the browser to beersafe.eu. As you can see, the application is now served over HTTPS. Great job.
If you inspect the traffic in the network console, you can see that the first request still goes to http://beersafe.eu. But if you inspect the response, you will see that the server redirects the browser to the HTTPS version of the site. The image below illustrates the redirect in action.

Also check what happens if you explicitly navigate to an HTTP URL, such as http://beersafe.eu/Beers?id=2. As you can see, the server again redirects the browser to the HTTPS version of the application and keeps the URL intact.

Note that here, the HTTPS handler offers an easy way to enable the redirect. In real deployment scenarios, you can typically configure the web server or application server to redirect HTTP traffic to HTTPS.
Conclusion
That concludes this lab session. By fixing our mixed content problem, we have ensured that the BeerSafe application is compatible with HTTPS. Next, we redirected every HTTP request to the HTTPS version of the application, while keeping all URLs intact. This ensures that all links to the application keep working, even if they refer to a particular resource in the application.