So far, we talked about password-based authentication.
Unfortunately, passwords are a weak form of authentication.
This remains true, even if the application follows modern best practices.
The problem with passwords is that they are something that the user knows.
When the attacker learns the password, he can use the password to impersonate the user.
In essence, a password is a knowledge-based authentication factor.
But other means of authentication exist as well.
One example is the possession of a physical device, such as a mobile phone, smart card or USB key.
Another authentication factor can be inherent to the user.
This class of authentication factors is better known as biometrics.
Familiar examples are fingerprints and retina scans.
Another common authentication factor is behavior and context.
This factor includes properties such as user behavior and user location.
These alternative authentication factors are less useful in isolation.
Instead, they are often used in combination with a knowledge-based authentication factor, such as a password.
This technique is known as multi-factor authentication.
Going into depth on multi-factor authentication would take us too far for this course.
Instead, we will take a brief look at two multi-factor authentication schemes for web applications.
The first is the combination of a username and password with an SMS-based verification code.
The second is the combination of a username and password with a U2F security key.
Many applications combine a traditional password with an SMS-based verification code.
In this scheme, the user links a mobile phone number with his account.
When the user logs in, the application sends a random verification code to the phone number.
The user enters this code into the second login form, and the application compares if the codes match.
This authentication scheme combines a knowledge-based factor with a possession-based factor.
At first sight, an SMS-based verification code seems very secure.
An attacker needs access to the password, as well as the user’s phone.
But because this scheme makes a lot of assumptions, it suffers from a variety of weaknesses.
First, if the user stores his password on his smartphone, the attacker only needs to access the phone.
Second, an attacker setting up a phishing site can still trick the user.
When the user enters his credentials to the phishing site,
the attacker uses them to start the login process on the real application.
When the application sends a verification code, the user will enter that into the phishing site.
A third weakness follows from the use of a mobile phone number.
If the attacker can take control of the phone number, he can receive the verification code.
One way to do this is by tricking the phone company into transferring the number.
The attacker can also abuse the underlying cellular protocols to intercept verification codes.
Both scenarios are realistic attacks and have been observed in the past.
That is why it is no longer recommended to use a mobile phone number as an authentication factor.
A second option is the use of a U2F security key.
U2F stands for Universal Second Factor, and is an open standard for device-based authentication on the web.
The most popular implementation of U2F is the Yubikey, a USB security key.
Currently, they are supported by numerous major application providers, including Google and Facebook.
To use a U2F device, the user first registers it with his account.
From then on, the second step in the authentication process is inserting the U2F key and touching the device.
The device will use an embedded secret to sign a challenge,
proving to the application that it is the same device as registered before.
Multi-factor authentication with U2F devices is a secure scenario.
The successful signing of a challenge indicates the possession of a previously registered key.
The touching of the U2F device indicates a physical presence of the user.
This step makes it much harder for malware to trick the device into signing a challenge.
Additionally, the origin of the context where the authentication happens is part of the signature.
Therefore, U2F devices are not susceptible to phishing.
We are reaching the end of the section on secure authentication.
By now, you may realize that implementing secure password storage, secure authentication procedures
and multi-factor authentication requires a significant amount of effort.
But companies such as Google and Facebook have already implemented all of this,
and probably better than you ever can.
So how can we leverage this to our advantage?
One recent trend is the outsourcing of authentication to third parties.
This process is also known as social login.
When an application supports social login, you typically find buttons such as these on the login page.
Under the hood, delegating authentication often depends on the use of OAuth 2.0 or OpenID Connect.
But how does this work?
And is this secure?
When the user opts for a social login, the application redirects the user to the third-party authentication provider.
If the user is not logged in, the provider will trigger its own authentication procedure.
Once authenticated, the provider verifies whether the user allows the use of social login for our application.
When allowed, the authentication provider redirects the flow back to our application,
and passes a security token as part of the URL.
With this token, our application can request information about the user from the provider.
This information allows our application to identify the user.
Going into further detail here would take us too far.
In a nutshell, the result of delegating the authentication is information about the user’s identity, such as an email address.
With that email address, the application can couple the session to an existing account within the application.
Implementing this in practice poses many challenges, and lots of insecure implementations exist.
Further references can be found at the end of this chapter.
To conclude, there is a lot more to authentication than usernames and passwords.
Implementing multi-factor authentication a considered a best practice today,
but it requires a significant amount of effort.
A good alternative is delegating authentication to third-party providers.
But be warned, securely implementing OAuth 2.0 or OpenID Connect flows is also a challenge